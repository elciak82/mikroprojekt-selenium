"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const cli_ux_1 = require("cli-ux");
const plugins_1 = require("../../plugins");
let examplePlugin = 'heroku-production-status';
let bin = 'heroku';
const g = global;
if (g.oclif && g.oclif.config) {
    const config = g.oclif.config;
    bin = config.bin;
    let pjson = config.pjson.oclif || config.pjson['cli-engine'];
    if (pjson.help && pjson.help.plugins) {
        examplePlugin = Object.keys(pjson.help.plugins)[0];
    }
}
class PluginsUninstall extends command_1.Command {
    constructor() {
        super(...arguments);
        this.plugins = new plugins_1.default(this.config);
    }
    async run() {
        const { argv } = this.parse(PluginsUninstall);
        this.plugins = new plugins_1.default(this.config);
        for (let plugin of argv) {
            const friendly = this.plugins.friendlyName(plugin);
            cli_ux_1.default.action.start(`Uninstalling ${friendly}`);
            const unfriendly = await this.plugins.hasPlugin(plugin);
            if (!unfriendly) {
                cli_ux_1.default.warn(`${friendly} is not installed`);
                continue;
            }
            await this.plugins.uninstall(unfriendly.name);
            cli_ux_1.default.action.stop();
        }
    }
}
PluginsUninstall.description = 'removes a plugin from the CLI';
PluginsUninstall.usage = 'plugins:uninstall PLUGIN...';
PluginsUninstall.help = `
  Example:
    $ ${bin} plugins:uninstall ${examplePlugin}
  `;
PluginsUninstall.variableArgs = true;
PluginsUninstall.args = [{ name: 'plugin', description: 'plugin to uninstall', required: true }];
PluginsUninstall.aliases = ['plugins:unlink'];
exports.default = PluginsUninstall;
