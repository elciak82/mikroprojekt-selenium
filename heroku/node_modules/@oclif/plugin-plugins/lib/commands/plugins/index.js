"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const color_1 = require("@heroku-cli/color");
const command_1 = require("@oclif/command");
const plugins_1 = require("../../plugins");
const util_1 = require("../../util");
class PluginsIndex extends command_1.Command {
    constructor() {
        super(...arguments);
        // static examples = [`<%
        // let examplePlugins = {
        // 'heroku-ci': {version: '1.8.0'},
        // 'heroku-cli-status': {version: '3.0.10', type: 'link'},
        // 'heroku-fork': {version: '4.1.22'}
        // }
        // const examplePluginsHelp = Object.entries(examplePlugins).map(([name, p]) => \`    \${name} \${p.version}\`).join('\n')
        // %>$ <%- config.bin %> plugins
        // <%- examplePluginsHelp %>
        // `]
        this.plugins = new plugins_1.default(this.config);
    }
    async run() {
        const { flags } = this.parse(PluginsIndex);
        let plugins = this.config.plugins;
        util_1.sortBy(plugins, p => p.name);
        if (!flags.core) {
            plugins = plugins.filter(p => p.type !== 'core' && p.type !== 'dev');
        }
        if (!plugins.length) {
            this.log('no plugins installed');
            return;
        }
        for (let plugin of plugins) {
            let output = `${this.plugins.friendlyName(plugin.name)} ${color_1.default.dim(plugin.version)}`;
            if (plugin.type !== 'user')
                output += color_1.default.dim(` (${plugin.type})`);
            if (plugin.type === 'link')
                output += ` ${plugin.root}`;
            else if (plugin.tag && plugin.tag !== 'latest')
                output += color_1.default.dim(` (${String(plugin.tag)})`);
            this.log(output);
        }
    }
}
PluginsIndex.flags = {
    core: command_1.flags.boolean({ description: 'show core plugins' })
};
PluginsIndex.description = 'list installed plugins';
PluginsIndex.examples = ['$ <%- config.bin %> plugins'];
exports.default = PluginsIndex;
